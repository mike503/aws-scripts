#!/usr/bin/env bash

# jq is required: https://stedolan.github.io/jq/
JQ=`which jq`
if [ "${JQ}no" = "no" ]; then
  echo "This script requires jq to run. Have a friendly sysadmin run: sudo apt-get -y install jq"
  exit 255
fi

DEFAULTINSTANCENUMBER=0; # zero referenced

function usage() {
    cat <<EOM
### ec2ssh ###

Simple script for us lazy people to use AWS API to lookup the information needed to SSH.

It will check if you have the right keyfile (as defined by the EC2 instance information)

Optional arguments:
    -u | --user       Force the SSH username. (Default: derived by API)
    -i | --identity   Force the SSH key file. (Default: /home/$USER/.ssh/KEYFILE.pem)
    -n | --number     If more than one EB host specify the instance index (zero referenced)
    
Examples:

    Default:
        ec2ssh instancename

    Overriding the SSH username:
        ec2ssh -u foo instancename

    Overriding the SSH private key file used:
        ec2ssh -i ~/.ssh/mykey.pem instancename

EOM
  exit 2
}
if [ $# == 0 ]; then usage; fi

# ref: http://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
while [[ $# > 1 ]]
do
key="$1"

case $key in
    -u|--user)
    SSHUSER="$2"
    shift # past argument
    ;;
    -i|--identity)
    KEYFILE="$2"
    shift # past argument
    ;;
    -n|--number)
    INSTANCENUMBER="$2"
    shift
    ;;
    --default)
    DEFAULT=YES
    ;;
    *)
            # unknown option
    ;;
esac
shift # past argument or value
done

# if you're using a bastion host
if [ ! "${SSHPROXYHOST}no" = "no" ]; then
  if [ ! "${SSHUSER}no" = "no" ]; then
    ssh -tt $SSHPROXYHOST "ec2ssh -u $SSHUSER $1"
  elif [ ! "${KEYFILE}no" = "no" ]; then
    ssh -tt $SSHPROXYHOST "ec2ssh -i $KEYFILE $1"
  elif [ ! "${INSTANCENUMBER}no" = "no" ]; then
    ssh -tt $SSHPROXYHOST "ec2ssh -n $INSTANCENUMBER $1"
  else 
    ssh -tt $SSHPROXYHOST "ec2ssh $1"
  fi
  exit 0
fi


# check if ~/.aws/config has "region" key
# check if AWS_REGION whatever is set
# if not, default to --region us-east-1 and make a note

INSTANCES=`aws ec2 describe-instances --filters "Name=tag:Name,Values=$1" "Name=instance-state-name,Values=running" --output json`

COUNT=`echo "$INSTANCES" | grep -c ReservationId`
if [ "$COUNT" -eq 0 ]; then
  echo "No running instance(s) matching that name."
  exit 255
elif [ "$COUNT" -gt 1 ]; then
  if [ -z "$INSTANCENUMBER" ]; then 
    INSTANCENUMBER=$DEFAULTINSTANCENUMBER
    echo "NOTICE: multiple instances matching that name (is this an EB app?) - selecting the first one."
  fi
fi

# get information from the first instance only, we don't know how to loop with jq/bash
VPC=`echo "$INSTANCES" | jq '.Reservations['$INSTANCENUMBER'].Instances[0].VpcId' --raw-output`
if [ "$VPC" = "null" ]; then
  echo "NOTICE: instance is not in a VPC; connecting to the external IP"
  IP=`echo "$INSTANCES" | jq '.Reservations['$INSTANCENUMBER'].Instances[0].PublicIpAddress' --raw-output`
else
  IP=`echo "$INSTANCES" | jq '.Reservations['$INSTANCENUMBER'].Instances[0].PrivateIpAddress' --raw-output`
fi
KEYNAME=`echo "$INSTANCES" | jq '.Reservations['$INSTANCENUMBER'].Instances[0].KeyName' --raw-output`
IMAGE=`echo "$INSTANCES" | jq '.Reservations['$INSTANCENUMBER'].Instances[0].ImageId' --raw-output`

if [ "$IP"  = "null" ]; then
  echo "ERROR: Could not determine instance IP to connect to."
  exit 255
fi

if [ "${KEYFILE}no" = "no" ]; then
  if [ "$KEYNAME" = "null" ]; then
    echo "WARNING: no key defined for instance, good luck connecting automatically!"
  elif [ ! -f "$HOME/.ssh/$KEYNAME.pem" ]; then
    echo "ERROR: Private key file $HOME/.ssh/$KEYNAME.pem does not exist."
    exit 255
  else
    KEYFILE="$HOME/.ssh/$KEYNAME.pem"
  fi
fi

# lastly figure it out based on image
if [ "${SSHUSER}no" = "no" ]; then
  SSHUSER=nobody
fi

function user_by_image() {
  # we can hardcode certain things here to save API lookups and more complex logic
  # Amazon EB image, should always be based on Amazon Linux and use ec2-user
  if [ "$1" = "ami-87cee4ed" ]; then
    SSHUSER=ec2-user
  fi
  # i know this is Ubuntu
  if [ "$1" = "ami-5ab86c32" ]; then
    SSHUSER=ubuntu
  fi
  # fallback - use an API call/try to figure it out
  if [ "$SSHUSER" = "nobody" ]; then
    IMAGELOC=`aws ec2 describe-images --image-id $1 --output json | jq '.Images[0].ImageLocation'`
    if [[ $IMAGELOC == *"amazon/aws-elasticbeanstalk"* ]]; then
      SSHUSER=ec2-user
    elif [[ $IMAGELOC == *"ubuntu"* ]]; then
      SSHUSER=ubuntu
    else
      echo "NOTICE: no idea what user to select, assuming ec2-user as sensible default."
      SSHUSER=ec2-user
    fi
  fi
}
user_by_image $IMAGE

echo
echo "Executing: ssh -i $KEYFILE $SSHUSER@$IP"
echo

chmod 0400 $KEYFILE
ssh -i $KEYFILE $SSHUSER@$IP
